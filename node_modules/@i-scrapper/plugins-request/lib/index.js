const fs = require("fs");
const path = require("path");
const axios = require("axios").default;
const cheerio = require("cheerio").default;
const FormData = require("form-data");
const FileType = require("file-type");

module.exports = {
    async fetch(options) {
        if (!options || typeof options != "object" || Array.isArray(options)) {
            throw new Error("<options> must be typeof object{}");
        }
        if (options.data) {
            let useBuffer;
            const bodyForm = new FormData();
            const bodyParams = new URLSearchParams();
            if (Array.isArray(options.data)) {
                throw new Error("<options.data> must be typeof object{}");
            }
            const entriesPayload = Object.entries(options.data);
            for (var [key, val] of entriesPayload) {
                if (Buffer.isBuffer(val)) {
                    useBuffer = true;
                    const { ext } = await FileType.fromBuffer(val);
                    bodyForm.append(key, Buffer.from(val), `${Date.now()}.${ext}`);
                    continue;
                }
                bodyForm.append(key, val), bodyParams.append(key, val);
            }
            options.data = useBuffer ? bodyForm : bodyParams;
            options.method = options.method || "POST";
        }
        if (options.asBuffer) options.responseType = "arraybuffer";
        if (options.asStream) options.responseType = "stream";
        if (options.asFile) options.responseType = "arraybuffer";
        return new Promise((resolve, reject) => {
            axios(options)
            .then(async (response) => {
                if (typeof response.data !== "object") {
                    response.parseDOM = cheerio.load(response.data);
                    response.parseDOM.load = function load(DOM) {
                        return cheerio.load(DOM);
                    }.bind();
                }
                if (options.asFile) {
                    const fileName = (typeof options.asFile === "boolean" || options.asFile === "true") ? Date.now() : options.asFile;
                    const { ext } = await FileType.fromBuffer(response.data);
                    const filePath = path.join(process.cwd(), `${fileName}.${ext}`);
                    await fs.writeFileSync(filePath, response.data);
                }
                return resolve(response);
            })
            .catch(reject);
        });
    }
};